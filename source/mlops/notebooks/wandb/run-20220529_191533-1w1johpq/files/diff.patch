diff --git a/notebooks/EDA.ipynb b/notebooks/EDA.ipynb
index 0701963..46a9c16 100644
--- a/notebooks/EDA.ipynb
+++ b/notebooks/EDA.ipynb
@@ -13035,24 +13035,24 @@
     }
    ],
    "source": [
-    "fig = make_subplots(rows=4,cols=1,shared_xaxes=False,subplot_titles=['Sleep Time','Physical Health','Mental Health','BMI'])\n",
+    "fig_num = make_subplots(rows=4,cols=1,shared_xaxes=False,subplot_titles=['Sleep Time','Physical Health','Mental Health','BMI'])\n",
     "row = 1\n",
     "for i in ['SleepTime','PhysicalHealth','MentalHealth']:\n",
     "    x = data.loc[data['HeartDisease']=='Yes',i]\n",
     "    y = x.value_counts(normalize=True)\n",
-    "    fig.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and heart disease'),legendgroup=row),row=row,col=1)\n",
+    "    fig_num.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and heart disease'),legendgroup=row),row=row,col=1)\n",
     "    x = data.loc[data['HeartDisease']=='No',i]\n",
     "    y = x.value_counts(normalize=True)\n",
-    "    fig.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and no heart disease'),legendgroup=row),row=row,col=1)    \n",
+    "    fig_num.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and no heart disease'),legendgroup=row),row=row,col=1)    \n",
     "    row = row+1\n",
     "\n",
     "x = data.loc[data['HeartDisease']=='Yes','BMI']\n",
     "y = x.value_counts(normalize=True)\n",
-    "fig.add_trace(go.Histogram(x=y.keys(),y=y.values,name=('BMI'+ ' and heart disease'),legendgroup=row),row=row,col=1)\n",
+    "fig_num.add_trace(go.Histogram(x=y.keys(),y=y.values,name=('BMI'+ ' and heart disease'),legendgroup=row),row=row,col=1)\n",
     "x = data.loc[data['HeartDisease']=='No','BMI']\n",
     "y = x.value_counts(normalize=True)\n",
-    "fig.add_trace(go.Histogram(x=y.keys(),y=y.values,name=('BMI'+ ' and no heart disease'),legendgroup=row),row=row,col=1)    \n",
-    "fig.update_layout(\n",
+    "fig_num.add_trace(go.Histogram(x=y.keys(),y=y.values,name=('BMI'+ ' and no heart disease'),legendgroup=row),row=row,col=1)    \n",
+    "fig_num.update_layout(\n",
     "    title=\"Numeric data normalized\",\n",
     "    legend=dict(\n",
     "        orientation=\"v\",\n",
@@ -13065,7 +13065,7 @@
     "    width = 1000,\n",
     "    height = 1400,\n",
     "    )\n",
-    "fig.show()\n"
+    "fig_num.show()\n"
    ]
   },
   {
@@ -25903,24 +25903,24 @@
     }
    ],
    "source": [
-    "fig = make_subplots(rows=4,cols=1,shared_xaxes=False,subplot_titles=['Sleep Time','Physical Health','Mental Health','BMI'])\n",
+    "fig_norm = make_subplots(rows=4,cols=1,shared_xaxes=False,subplot_titles=['Sleep Time','Physical Health','Mental Health','BMI'])\n",
     "row = 1\n",
     "for i in ['SleepTime','PhysicalHealth','MentalHealth']:\n",
     "    x = data.loc[data['HeartDisease']=='Yes',i]\n",
     "    y = x.value_counts()\n",
-    "    fig.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and heart disease'),legendgroup=row),row=row,col=1)\n",
+    "    fig_norm.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and heart disease'),legendgroup=row),row=row,col=1)\n",
     "    x = data.loc[data['HeartDisease']=='No',i]\n",
     "    y = x.value_counts()\n",
-    "    fig.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and no heart disease'),legendgroup=row),row=row,col=1)    \n",
+    "    fig_norm.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and no heart disease'),legendgroup=row),row=row,col=1)    \n",
     "    row = row+1\n",
     "\n",
     "x = data.loc[data['HeartDisease']=='Yes','BMI']\n",
     "y = x.value_counts()\n",
-    "fig.add_trace(go.Histogram(x=y.keys(),y=y.values,name=('BMI'+ ' and heart disease'),legendgroup=row),row=row,col=1)\n",
+    "fig_norm.add_trace(go.Histogram(x=y.keys(),y=y.values,name=('BMI'+ ' and heart disease'),legendgroup=row),row=row,col=1)\n",
     "x = data.loc[data['HeartDisease']=='No','BMI']\n",
     "y = x.value_counts()\n",
-    "fig.add_trace(go.Histogram(x=y.keys(),y=y.values,name=('BMI'+ ' and no heart disease'),legendgroup=row),row=row,col=1) \n",
-    "fig.update_layout(\n",
+    "fig_norm.add_trace(go.Histogram(x=y.keys(),y=y.values,name=('BMI'+ ' and no heart disease'),legendgroup=row),row=row,col=1) \n",
+    "fig_norm.update_layout(\n",
     "    title=\"Numeric data plots\",\n",
     "    legend=dict(\n",
     "        groupclick = 'toggleitem',\n",
@@ -25934,7 +25934,7 @@
     "    width = 1000,\n",
     "    height = 1400,\n",
     "    )\n",
-    "fig.show()   \n"
+    "fig_norm.show()   \n"
    ]
   },
   {
@@ -27672,18 +27672,18 @@
     }
    ],
    "source": [
-    "fig = make_subplots(rows=len(lista),cols=1,shared_xaxes=False,subplot_titles=lista)\n",
+    "fig_categorical = make_subplots(rows=len(lista),cols=1,shared_xaxes=False,subplot_titles=lista)\n",
     "row = 1\n",
     "for i in lista:\n",
     "    x = data.loc[data['HeartDisease']=='Yes',i]\n",
     "    y = x.value_counts()\n",
-    "    fig.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and heart disease'),legendgroup=row),row=row,col=1)\n",
+    "    fig_categorical.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and heart disease'),legendgroup=row),row=row,col=1)\n",
     "    x = data.loc[data['HeartDisease']=='No',i]\n",
     "    y = x.value_counts()\n",
-    "    fig.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and no heart disease'),legendgroup=row),row=row,col=1)    \n",
+    "    fig_categorical.add_trace(go.Bar(x=y.keys(),y=y.values,name=(i+ ' and no heart disease'),legendgroup=row),row=row,col=1)    \n",
     "    row = row+1\n",
     "\n",
-    "fig.update_layout(\n",
+    "fig_categorical.update_layout(\n",
     "    title=\"Categorical data plots\",\n",
     "    barmode = 'stack',\n",
     "    legend=dict(\n",
@@ -27698,7 +27698,7 @@
     "    width = 1000,\n",
     "    height = 4200,\n",
     "    )\n",
-    "fig.show()   "
+    "fig_categorical.show()   "
    ]
   }
  ],
diff --git a/notebooks/__pycache__/preprocessing.cpython-310.pyc b/notebooks/__pycache__/preprocessing.cpython-310.pyc
index 276491f..0850889 100644
Binary files a/notebooks/__pycache__/preprocessing.cpython-310.pyc and b/notebooks/__pycache__/preprocessing.cpython-310.pyc differ
diff --git a/notebooks/preprocessing.py b/notebooks/preprocessing.py
index 8636690..787360b 100644
--- a/notebooks/preprocessing.py
+++ b/notebooks/preprocessing.py
@@ -75,15 +75,17 @@ def resample_data_stratified(data: pd.DataFrame, column: str):
     return resample_data
 
 
-def inputation_categorical_data(inputation_type: int):
+def inputation_categorical_data(data: pd.DataFrame, inputation_type: int):
+    categorical_columns = data.columns.to_list()
     if inputation_type == 0:
         imp = SimpleImputer(strategy="most_frequent")
     elif inputation_type == 1:
         imp = SimpleImputer(strategy="constant", fill_value="Nao se aplica")
-    return imp
+    return_data = pd.DataFrame(imp.fit_transform(data), columns=categorical_columns)
+    return return_data
 
 
-def inputation_numerical_data(inputation_type: int):
+def inputation_numerical_data(data: pd.DataFrame, inputation_type: int):
     if inputation_type == 0:
         imp = SimpleImputer(strategy="mean")
     elif inputation_type == 1:
@@ -93,7 +95,7 @@ def inputation_numerical_data(inputation_type: int):
     if inputation_type == 3:
         imp = SimpleImputer(strategy="constant", fill_value=0)
 
-    return imp
+    return imp.fit_transform(data)
 
 
 def remove_outliers(numerical_data: pd.DataFrame, column: str):
@@ -116,10 +118,10 @@ class Feature_selector(BaseEstimator, TransformerMixin):
     def __init__(self, data_type="numerical"):
         self.data_type = data_type
 
-    def fit(self, X):
-        pass
+    def fit(self, X: pd.DataFrame):
+        return self
 
-    def transform(self, X):
+    def transform(self, X: pd.DataFrame):
         numerical_features, categorical_features = get_numerical_categorical_features(X)
         if self.data_type == "numerical":
             return X.loc[:, numerical_features]
@@ -141,7 +143,7 @@ class Preprocessing_initial_data(BaseEstimator, TransformerMixin):
         self.target_column = target_column
 
     def fit(self, X):
-        pass
+        return self
 
     def transform(self, X):
         if self.resample:
@@ -159,20 +161,27 @@ class Categorical_tranformer(BaseEstimator, TransformerMixin):
         inputation_type=0,
         treat_categorical=False,
         treat_type=0,
+        colnames=[],
     ):
         self.inputation_categorical = inputation_categorical
         self.inputation_type = inputation_type
         self.treat_categorical = treat_categorical
         self.treat_type = treat_type
+        self.colnames = colnames
+
+    def get_feature_names_out(self):
+        return self.colnames
 
     def fit(self, X):
         return self
 
     def transform(self, X):
-        if self.treat_categorical:
-            X = treat_numerical_data(X, self.treat_type)
         if self.inputation_categorical:
-            X = inputation_numerical_data(X, self.inputation_type)
+            X = inputation_categorical_data(X, self.inputation_type)
+        if self.treat_categorical:
+            X = treat_categorical_data(X, self.treat_type)
+
+        self.colnames = X.columns
         return X
 
 
@@ -183,11 +192,16 @@ class Numerical_tranformer(BaseEstimator, TransformerMixin):
         inputation_type=0,
         treat_numerical=True,
         treat_type=0,
+        colnames=[],
     ):
         self.inputation_numerical = inputation_numerical
         self.inputation_type = inputation_type
         self.treat_numerical = treat_numerical
         self.treat_type = treat_type
+        self.colnames = colnames
+
+    def get_feature_names_out(self):
+        return self.colnames
 
     def fit(self, X):
         return self
@@ -195,6 +209,7 @@ class Numerical_tranformer(BaseEstimator, TransformerMixin):
     def transform(self, X):
         if self.treat_numerical:
             X = treat_numerical_data(X, self.treat_type)
+
         if self.inputation_numerical:
             X = inputation_numerical_data(X, self.inputation_type)
         return X
@@ -209,8 +224,8 @@ class pipeline_preprocessing(BaseEstimator, TransformerMixin):
         treat_type=0,
         inputation_categorical=True,
         inputation_cat_type=0,
-        treat_categorical=False,
-        treat_cat_type=0,
+        treat_categorical=True,
+        treat_cat_type=1,
     ):
         self.inputation_categorical = inputation_categorical
         self.inputation_type = inputation_type
@@ -225,17 +240,21 @@ class pipeline_preprocessing(BaseEstimator, TransformerMixin):
         return self
 
     def transform(self, X):
+        X = resample_data_stratified(X, "HeartDisease")
+        numerical_features, categorical_features = get_numerical_categorical_features(X)
         transform_numerical = Numerical_tranformer(
             inputation_numerical=self.inputation_numerical,
             inputation_type=self.inputation_type,
             treat_numerical=self.treat_numerical,
             treat_type=self.treat_type,
+            colnames=numerical_features,
         )
         transform_categorical = Categorical_tranformer(
             inputation_categorical=self.inputation_categorical,
             inputation_type=self.inputation_cat_type,
             treat_categorical=self.treat_categorical,
             treat_type=self.treat_cat_type,
+            colnames=categorical_features,
         )
         numerical_pipeline = Pipeline(
             steps=[
@@ -255,5 +274,19 @@ class pipeline_preprocessing(BaseEstimator, TransformerMixin):
                 ("numerical_pipeline", numerical_pipeline),
             ]
         )
+        categorical_cols = list(
+            pipeline_preprocessing.get_params()["categorical_pipeline"][
+                1
+            ].get_feature_names_out()
+        )
 
-        return pipeline_preprocessing
+        numerical_cols = list(
+            pipeline_preprocessing.get_params()["numerical_pipeline"][
+                1
+            ].get_feature_names_out()
+        )
+        colnames = categorical_cols + numerical_cols
+        process_data = pd.DataFrame(
+            pipeline_preprocessing.fit_transform(X), columns=colnames
+        )
+        return process_data
diff --git a/poetry.lock b/poetry.lock
index 1c7367b..a8ac22f 100644
--- a/poetry.lock
+++ b/poetry.lock
@@ -17,6 +17,23 @@ toolz = "*"
 [package.extras]
 dev = ["black", "docutils", "ipython", "flake8", "pytest", "sphinx", "mistune (<2.0.0)", "m2r", "vega-datasets", "recommonmark"]
 
+[[package]]
+name = "anyio"
+version = "3.6.1"
+description = "High level compatibility layer for multiple asynchronous event loop implementations"
+category = "main"
+optional = false
+python-versions = ">=3.6.2"
+
+[package.dependencies]
+idna = ">=2.8"
+sniffio = ">=1.1"
+
+[package.extras]
+doc = ["packaging", "sphinx-rtd-theme", "sphinx-autodoc-typehints (>=1.2.0)"]
+test = ["coverage[toml] (>=4.5)", "hypothesis (>=4.0)", "pytest (>=7.0)", "pytest-mock (>=3.6.1)", "trustme", "contextlib2", "uvloop (<0.15)", "mock (>=4)", "uvloop (>=0.15)"]
+trio = ["trio (>=0.16)"]
+
 [[package]]
 name = "appnope"
 version = "0.1.3"
@@ -276,6 +293,24 @@ category = "main"
 optional = false
 python-versions = "*"
 
+[[package]]
+name = "fastapi"
+version = "0.78.0"
+description = "FastAPI framework, high performance, easy to learn, fast to code, ready for production"
+category = "main"
+optional = false
+python-versions = ">=3.6.1"
+
+[package.dependencies]
+pydantic = ">=1.6.2,<1.7 || >1.7,<1.7.1 || >1.7.1,<1.7.2 || >1.7.2,<1.7.3 || >1.7.3,<1.8 || >1.8,<1.8.1 || >1.8.1,<2.0.0"
+starlette = "0.19.1"
+
+[package.extras]
+all = ["requests (>=2.24.0,<3.0.0)", "jinja2 (>=2.11.2,<4.0.0)", "python-multipart (>=0.0.5,<0.0.6)", "itsdangerous (>=1.1.0,<3.0.0)", "pyyaml (>=5.3.1,<7.0.0)", "ujson (>=4.0.1,!=4.0.2,!=4.1.0,!=4.2.0,!=4.3.0,!=5.0.0,!=5.1.0,<6.0.0)", "orjson (>=3.2.1,<4.0.0)", "email_validator (>=1.1.1,<2.0.0)", "uvicorn[standard] (>=0.12.0,<0.18.0)"]
+dev = ["python-jose[cryptography] (>=3.3.0,<4.0.0)", "passlib[bcrypt] (>=1.7.2,<2.0.0)", "autoflake (>=1.4.0,<2.0.0)", "flake8 (>=3.8.3,<4.0.0)", "uvicorn[standard] (>=0.12.0,<0.18.0)", "pre-commit (>=2.17.0,<3.0.0)"]
+doc = ["mkdocs (>=1.1.2,<2.0.0)", "mkdocs-material (>=8.1.4,<9.0.0)", "mdx-include (>=1.4.1,<2.0.0)", "mkdocs-markdownextradata-plugin (>=0.1.7,<0.3.0)", "typer (>=0.4.1,<0.5.0)", "pyyaml (>=5.3.1,<7.0.0)"]
+test = ["pytest (>=6.2.4,<7.0.0)", "pytest-cov (>=2.12.0,<4.0.0)", "mypy (==0.910)", "flake8 (>=3.8.3,<4.0.0)", "black (==22.3.0)", "isort (>=5.0.6,<6.0.0)", "requests (>=2.24.0,<3.0.0)", "httpx (>=0.14.0,<0.19.0)", "email_validator (>=1.1.1,<2.0.0)", "sqlalchemy (>=1.3.18,<1.5.0)", "peewee (>=3.13.3,<4.0.0)", "databases[sqlite] (>=0.3.2,<0.6.0)", "orjson (>=3.2.1,<4.0.0)", "ujson (>=4.0.1,!=4.0.2,!=4.1.0,!=4.2.0,!=4.3.0,!=5.0.0,!=5.1.0,<6.0.0)", "python-multipart (>=0.0.5,<0.0.6)", "flask (>=1.1.2,<3.0.0)", "anyio[trio] (>=3.2.1,<4.0.0)", "types-ujson (==4.2.1)", "types-orjson (==3.6.2)", "types-dataclasses (==0.6.5)"]
+
 [[package]]
 name = "fastjsonschema"
 version = "2.15.3"
@@ -449,6 +484,17 @@ widgetsnbextension = ">=3.6.0,<3.7.0"
 [package.extras]
 test = ["pytest (>=3.6.0)", "pytest-cov", "mock"]
 
+[[package]]
+name = "isodate"
+version = "0.6.1"
+description = "An ISO 8601 date/time/duration parser and formatter"
+category = "main"
+optional = false
+python-versions = "*"
+
+[package.dependencies]
+six = "*"
+
 [[package]]
 name = "jedi"
 version = "0.18.1"
@@ -692,6 +738,21 @@ category = "main"
 optional = false
 python-versions = ">=3.5"
 
+[[package]]
+name = "networkx"
+version = "2.8.2"
+description = "Python package for creating and manipulating graphs and networks"
+category = "main"
+optional = false
+python-versions = ">=3.8"
+
+[package.extras]
+default = ["numpy (>=1.19)", "scipy (>=1.8)", "matplotlib (>=3.4)", "pandas (>=1.3)"]
+developer = ["pre-commit (>=2.18)", "mypy (>=0.942)"]
+doc = ["sphinx (>=4.5)", "pydata-sphinx-theme (>=0.8.1)", "sphinx-gallery (>=0.10)", "numpydoc (>=1.3)", "pillow (>=9.1)", "nb2plots (>=0.6)", "texext (>=0.6.6)"]
+extra = ["lxml (>=4.6)", "pygraphviz (>=1.9)", "pydot (>=1.4.2)", "sympy (>=1.10)"]
+test = ["pytest (>=7.1)", "pytest-cov (>=3.0)", "codecov (>=2.1)"]
+
 [[package]]
 name = "notebook"
 version = "6.4.11"
@@ -1115,6 +1176,23 @@ python-versions = ">=3.6"
 cffi = {version = "*", markers = "implementation_name == \"pypy\""}
 py = {version = "*", markers = "implementation_name == \"pypy\""}
 
+[[package]]
+name = "rdflib"
+version = "6.1.1"
+description = "RDFLib is a Python library for working with RDF, a simple yet powerful language for representing information."
+category = "main"
+optional = false
+python-versions = ">=3.7"
+
+[package.dependencies]
+isodate = "*"
+pyparsing = "*"
+
+[package.extras]
+docs = ["sphinx (<5)", "sphinxcontrib-apidoc"]
+html = ["html5lib"]
+tests = ["berkeleydb", "html5lib", "networkx", "pytest", "pytest-cov", "pytest-subtests"]
+
 [[package]]
 name = "requests"
 version = "2.27.1"
@@ -1280,6 +1358,14 @@ category = "main"
 optional = false
 python-versions = ">=3.6"
 
+[[package]]
+name = "sniffio"
+version = "1.2.0"
+description = "Sniff out which async library your code is running under"
+category = "main"
+optional = false
+python-versions = ">=3.5"
+
 [[package]]
 name = "soupsieve"
 version = "2.3.2.post1"
@@ -1304,6 +1390,20 @@ pure-eval = "*"
 [package.extras]
 tests = ["pytest", "typeguard", "pygments", "littleutils", "cython"]
 
+[[package]]
+name = "starlette"
+version = "0.19.1"
+description = "The little ASGI library that shines."
+category = "main"
+optional = false
+python-versions = ">=3.6"
+
+[package.dependencies]
+anyio = ">=3.4.0,<5"
+
+[package.extras]
+full = ["itsdangerous", "jinja2", "python-multipart", "pyyaml", "requests"]
+
 [[package]]
 name = "streamlit"
 version = "1.9.1"
@@ -1337,6 +1437,19 @@ tzlocal = "*"
 validators = "*"
 watchdog = {version = "*", markers = "platform_system != \"Darwin\""}
 
+[[package]]
+name = "streamlit-agraph"
+version = "0.0.37"
+description = "Interactive Graph Vis for Streamlit."
+category = "main"
+optional = false
+python-versions = ">=3.6"
+
+[package.dependencies]
+networkx = ">=2.5"
+rdflib = ">=6.0.2"
+streamlit = ">=0.63"
+
 [[package]]
 name = "tenacity"
 version = "8.0.1"
@@ -1576,13 +1689,17 @@ testing = ["pytest (>=6)", "pytest-checkdocs (>=2.4)", "pytest-flake8", "pytest-
 [metadata]
 lock-version = "1.1"
 python-versions = "3.10.2"
-content-hash = "92990c66cdcef117623cd96b15b7ac08f85649f1ce9c53c8e6d2e133b19515d2"
+content-hash = "30059ddfb57472d9289736441468478bb9860dd8644d08e7399744b7682dcdbd"
 
 [metadata.files]
 altair = [
     {file = "altair-4.2.0-py3-none-any.whl", hash = "sha256:0c724848ae53410c13fa28be2b3b9a9dcb7b5caa1a70f7f217bd663bb419935a"},
     {file = "altair-4.2.0.tar.gz", hash = "sha256:d87d9372e63b48cd96b2a6415f0cf9457f50162ab79dc7a31cd7e024dd840026"},
 ]
+anyio = [
+    {file = "anyio-3.6.1-py3-none-any.whl", hash = "sha256:cb29b9c70620506a9a8f87a309591713446953302d7d995344d0d7c6c0c9a7be"},
+    {file = "anyio-3.6.1.tar.gz", hash = "sha256:413adf95f93886e442aea925f3ee43baa5a765a64a0f52c6081894f9992fdd0b"},
+]
 appnope = [
     {file = "appnope-0.1.3-py2.py3-none-any.whl", hash = "sha256:265a455292d0bd8a72453494fa24df5a11eb18373a60c7c0430889f22548605e"},
     {file = "appnope-0.1.3.tar.gz", hash = "sha256:02bd91c4de869fbb1e1c50aafc4098827a7a54ab2f39d9dcba6c9547ed920e24"},
@@ -1782,6 +1899,10 @@ executing = [
     {file = "executing-0.8.3-py2.py3-none-any.whl", hash = "sha256:d1eef132db1b83649a3905ca6dd8897f71ac6f8cac79a7e58a1a09cf137546c9"},
     {file = "executing-0.8.3.tar.gz", hash = "sha256:c6554e21c6b060590a6d3be4b82fb78f8f0194d809de5ea7df1c093763311501"},
 ]
+fastapi = [
+    {file = "fastapi-0.78.0-py3-none-any.whl", hash = "sha256:15fcabd5c78c266fa7ae7d8de9b384bfc2375ee0503463a6febbe3bab69d6f65"},
+    {file = "fastapi-0.78.0.tar.gz", hash = "sha256:3233d4a789ba018578658e2af1a4bb5e38bdd122ff722b313666a9b2c6786a83"},
+]
 fastjsonschema = [
     {file = "fastjsonschema-2.15.3-py3-none-any.whl", hash = "sha256:ddb0b1d8243e6e3abb822bd14e447a89f4ab7439342912d590444831fa00b6a0"},
     {file = "fastjsonschema-2.15.3.tar.gz", hash = "sha256:0a572f0836962d844c1fc435e200b2e4f4677e4e6611a2e3bdd01ba697c275ec"},
@@ -1826,6 +1947,10 @@ ipywidgets = [
     {file = "ipywidgets-7.7.0-py2.py3-none-any.whl", hash = "sha256:e58ff58bc94d481e91ecb6e13a5cb96a87b6b8ade135e055603d0ca24593df38"},
     {file = "ipywidgets-7.7.0.tar.gz", hash = "sha256:ab4a5596855a88b83761921c768707d65e5847068139bc1729ddfe834703542a"},
 ]
+isodate = [
+    {file = "isodate-0.6.1-py2.py3-none-any.whl", hash = "sha256:0751eece944162659049d35f4f549ed815792b38793f07cf73381c1c87cbed96"},
+    {file = "isodate-0.6.1.tar.gz", hash = "sha256:48c5881de7e8b0a0d648cb024c8062dc84e7b840ed81e864c7614fd3c127bde9"},
+]
 jedi = [
     {file = "jedi-0.18.1-py2.py3-none-any.whl", hash = "sha256:637c9635fcf47945ceb91cd7f320234a7be540ded6f3e99a50cb6febdfd1ba8d"},
     {file = "jedi-0.18.1.tar.gz", hash = "sha256:74137626a64a99c8eb6ae5832d99b3bdd7d29a3850fe2aa80a4126b2a7d949ab"},
@@ -2010,6 +2135,10 @@ nest-asyncio = [
     {file = "nest_asyncio-1.5.5-py3-none-any.whl", hash = "sha256:b98e3ec1b246135e4642eceffa5a6c23a3ab12c82ff816a92c612d68205813b2"},
     {file = "nest_asyncio-1.5.5.tar.gz", hash = "sha256:e442291cd942698be619823a17a86a5759eabe1f8613084790de189fe9e16d65"},
 ]
+networkx = [
+    {file = "networkx-2.8.2-py3-none-any.whl", hash = "sha256:51d6ae63c24dcd33901357688a2ad20d6bcd38f9a4c5307720048d3a8081059c"},
+    {file = "networkx-2.8.2.tar.gz", hash = "sha256:ae99c9b0d35e5b4a62cf1cfea01e5b3633d8d02f4a0ead69685b6e7de5b85eab"},
+]
 notebook = [
     {file = "notebook-6.4.11-py3-none-any.whl", hash = "sha256:b4a6baf2eba21ce67a0ca11a793d1781b06b8078f34d06c710742e55f3eee505"},
     {file = "notebook-6.4.11.tar.gz", hash = "sha256:709b1856a564fe53054796c80e17a67262071c86bfbdfa6b96aaa346113c555a"},
@@ -2468,6 +2597,10 @@ pyzmq = [
     {file = "pyzmq-23.0.0-pp39-pypy39_pp73-win_amd64.whl", hash = "sha256:4d861ae20040afc17adef33053c328667da78d4d3676b2936788fd031665e3a8"},
     {file = "pyzmq-23.0.0.tar.gz", hash = "sha256:a45f5c0477d12df05ef2e2922b49b7c0ae9d0f4ff9b6bb0d666558df0ef37122"},
 ]
+rdflib = [
+    {file = "rdflib-6.1.1-py3-none-any.whl", hash = "sha256:fc81cef513cd552d471f2926141396b633207109d0154c8e77926222c70367fe"},
+    {file = "rdflib-6.1.1.tar.gz", hash = "sha256:8dbfa0af2990b98471dacbc936d6494c997ede92fd8ed693fb84ee700ef6f754"},
+]
 requests = [
     {file = "requests-2.27.1-py2.py3-none-any.whl", hash = "sha256:f22fa1e554c9ddfd16e6e41ac79759e17be9e492b3587efa038054674760e72d"},
     {file = "requests-2.27.1.tar.gz", hash = "sha256:68d7c56fd5a8999887728ef304a6d12edc7be74f1cfa47714fc8b414525c9a61"},
@@ -2622,6 +2755,10 @@ smmap = [
     {file = "smmap-5.0.0-py3-none-any.whl", hash = "sha256:2aba19d6a040e78d8b09de5c57e96207b09ed71d8e55ce0959eeee6c8e190d94"},
     {file = "smmap-5.0.0.tar.gz", hash = "sha256:c840e62059cd3be204b0c9c9f74be2c09d5648eddd4580d9314c3ecde0b30936"},
 ]
+sniffio = [
+    {file = "sniffio-1.2.0-py3-none-any.whl", hash = "sha256:471b71698eac1c2112a40ce2752bb2f4a4814c22a54a3eed3676bc0f5ca9f663"},
+    {file = "sniffio-1.2.0.tar.gz", hash = "sha256:c4666eecec1d3f50960c6bdf61ab7bc350648da6c126e3cf6898d8cd4ddcd3de"},
+]
 soupsieve = [
     {file = "soupsieve-2.3.2.post1-py3-none-any.whl", hash = "sha256:3b2503d3c7084a42b1ebd08116e5f81aadfaea95863628c80a3b774a11b7c759"},
     {file = "soupsieve-2.3.2.post1.tar.gz", hash = "sha256:fc53893b3da2c33de295667a0e19f078c14bf86544af307354de5fcf12a3f30d"},
@@ -2630,10 +2767,18 @@ stack-data = [
     {file = "stack_data-0.2.0-py3-none-any.whl", hash = "sha256:999762f9c3132308789affa03e9271bbbe947bf78311851f4d485d8402ed858e"},
     {file = "stack_data-0.2.0.tar.gz", hash = "sha256:45692d41bd633a9503a5195552df22b583caf16f0b27c4e58c98d88c8b648e12"},
 ]
+starlette = [
+    {file = "starlette-0.19.1-py3-none-any.whl", hash = "sha256:5a60c5c2d051f3a8eb546136aa0c9399773a689595e099e0877704d5888279bf"},
+    {file = "starlette-0.19.1.tar.gz", hash = "sha256:c6d21096774ecb9639acad41b86b7706e52ba3bf1dc13ea4ed9ad593d47e24c7"},
+]
 streamlit = [
     {file = "streamlit-1.9.1-py2.py3-none-any.whl", hash = "sha256:9c961dccaaf46b645afa204732409ab6cfac68a766d2a70610f1f95cbfb56c9d"},
     {file = "streamlit-1.9.1.tar.gz", hash = "sha256:06dcdaeff79d07002d50ea8ca7036a444bc37ed138ca2c1afda3e085e1b45c1a"},
 ]
+streamlit-agraph = [
+    {file = "streamlit-agraph-0.0.37.tar.gz", hash = "sha256:34028024fb9cdc85623bdd6f0ea74f9e2de0561e9eebf761956844475cb6ef4d"},
+    {file = "streamlit_agraph-0.0.37-py3-none-any.whl", hash = "sha256:76b6ba6aa4d7ce3a1f5ca399170865cec356aa57731efe1d63bfdb84ae3e2386"},
+]
 tenacity = [
     {file = "tenacity-8.0.1-py3-none-any.whl", hash = "sha256:f78f4ea81b0fabc06728c11dc2a8c01277bfc5181b321a4770471902e3eb844a"},
     {file = "tenacity-8.0.1.tar.gz", hash = "sha256:43242a20e3e73291a28bcbcacfd6e000b02d3857a9a9fff56b297a27afdc932f"},
diff --git a/pyproject.toml b/pyproject.toml
index 0801610..b8e1d1b 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -15,6 +15,8 @@ streamlit = "^1.8.1"
 pandas = "^1.4.2"
 sklearn-pandas = "^2.2.0"
 pydantic = "^1.9.1"
+fastapi = "^0.78.0"
+streamlit-agraph = "^0.0.37"
 
 [tool.poetry.dev-dependencies]
 pytest = "^7.1.2"
